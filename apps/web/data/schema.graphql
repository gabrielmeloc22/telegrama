schema {
  query: query
  mutation: mutation
  subscription: subscription
}

"""Root query"""
type query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!

  """All messages"""
  messages(
    after: String
    first: Int
    before: String
    last: Int

    """Either the chat id or an user id for individual chats"""
    chatId: String!
  ): MessageConnection!

  """All users"""
  users(after: String, first: Int, before: String, last: Int, filter: UserFilter): UserConnection!

  """A user"""
  user(userId: String): User

  """me"""
  me(after: String, first: Int, before: String, last: Int): User

  """My chats"""
  chats(
    search: String

    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): ChatConnection!

  """A chat"""
  chat(
    """Either the chat id or an user id for individual chats"""
    id: String!
  ): Chat
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""A connection to a list of items."""
type MessageConnection implements Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MessageEdge]!
}

"""A connection to a list of items."""
interface Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type MessageEdge {
  """The item at the end of the edge."""
  node: Message

  """A cursor for use in pagination."""
  cursor: String!
}

type Message implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose_id"""
  _id: String!
  localId: Int!
  from: User!
  delivered: Boolean!
  deliveredAt: DateTime
  seen: Boolean!
  seenAt: DateTime
  content: String!
  createdAt: DateTime
  chat: ChatEdge
}

type User implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose_id"""
  _id: String!
  username: String!
  avatar: String
  email: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""An edge in a connection."""
type ChatEdge {
  """The item at the end of the edge."""
  node: Chat

  """A cursor for use in pagination."""
  cursor: String!
}

type Chat implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose_id"""
  _id: String!

  """The recipient when not a group chat"""
  user: User
  name: String!
  lastMessage: MessageEdge
  group: Boolean

  """Group chat users"""
  users(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): UserConnection
  updatedAt: DateTime
  createdAt: DateTime
  messages(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): MessageConnection
}

"""A connection to a list of items."""
type UserConnection implements Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User

  """A cursor for use in pagination."""
  cursor: String!
}

input UserFilter {
  username: String
}

"""A connection to a list of items."""
type ChatConnection implements Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChatEdge]!
}

type mutation {
  register(input: RegisterUserInput!): RegisterUserPayload
  login(input: LoginMutationInput!): LoginMutationPayload
  sendMessage(input: SendMessageInput!): SendMessagePayload
  sendTypingStatus(input: SendTypingStatusInput!): SendTypingStatusPayload
  deleteMessage(input: DeleteMessageInput!): DeleteMessagePayload
  deleteChat(input: DeleteChatInput!): DeleteChatPayload
  createGroupChat(input: CreateGroupChatInput!): CreateGroupChatPayload
}

type RegisterUserPayload {
  token: String
  user: User
  errors: [RegisterMutationErrors!]
  clientMutationId: String
}

enum RegisterMutationErrors {
  USERNAME_TAKEN
  EMAIL_TAKEN
}

input RegisterUserInput {
  username: String!
  email: EmailAddress
  password: String!
  clientMutationId: String
}

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress @specifiedBy(url: "https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address")

type LoginMutationPayload {
  token: String
  user: User
  errors: [LoginMutationErrors!]
  clientMutationId: String
}

enum LoginMutationErrors {
  INVALID_CREDENTIALS
  INVALID_PASSWORD
}

input LoginMutationInput {
  password: NonEmptyString
  email: String
  username: String
  clientMutationId: String
}

"""A string that cannot be passed as an empty value"""
scalar NonEmptyString

type SendMessagePayload {
  message: MessageEdge
  clientMutationId: String
}

input SendMessageInput {
  content: NonEmptyString

  """The recipient id, a user or a chat"""
  toId: String!

  """A int that identifies the message of a user in chat locally"""
  localId: Int!
  clientMutationId: String
}

type SendTypingStatusPayload {
  clientMutationId: String
}

input SendTypingStatusInput {
  chatId: String!
  typing: Boolean!
  clientMutationId: String
}

type DeleteMessagePayload {
  """The messages id to be deleted"""
  deletedIds: [ID]
  clientMutationId: String
}

input DeleteMessageInput {
  chatId: String!

  """The messages id to be deleted"""
  ids: [ID]
  clientMutationId: String
}

type DeleteChatPayload {
  """The deleted chat"""
  deletedId: ID
  clientMutationId: String
}

input DeleteChatInput {
  chatId: String!
  clientMutationId: String
}

type CreateGroupChatPayload {
  """The created group chat"""
  chat: Chat
  clientMutationId: String
}

input CreateGroupChatInput {
  """The group chat name"""
  name: String

  """The members added to the group"""
  members: [String]!
  clientMutationId: String
}

type subscription {
  onMessage(input: MessageInput!): MessagePayload
  onType(input: onTypeInput!): onTypePayload
}

type MessagePayload {
  newChat: Boolean
  chat: Chat
  deletedChat: ID
  deletedMessages: [ID]
  newMessage: MessageEdge
  clientSubscriptionId: String
}

input MessageInput {
  clientSubscriptionId: String
}

type onTypePayload {
  typing: Boolean
  user: User
  clientSubscriptionId: String
}

input onTypeInput {
  chatId: String!
  clientSubscriptionId: String
}